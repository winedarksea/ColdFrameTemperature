n1<-30
users1 <- rep(NA, length(prior_rate))
for(i in 1:length(prior_rate)) {
users1[i] <- gen_model(prior_rate[i], n1)
}
users1 <- na.omit(users1)
# Trial 1:
data1<-10
posterior1 <- prior_rate[users1 == data1]
hist(posterior1, breaks = 20)
# posterior1 becomes our new prior
n_draws <- length(posterior1)
users2 <- rep(NA, n_draws)
#Trial 2:
n2<-50
for(i in 1:n_draws) {
users2[i] <- gen_model(posterior1[i], n2)
}
# Trial 2:
data2<-20
posterior2 <- posterior1[users2 == data2]
hist(posterior2, breaks = 20)
##### Based on HW 2 SOLUTION
# Number of random draws from the prior
set.seed(123456)
n_draws <- 1000000
# prior_rate <- rbeta(n_draws, 2, 5)
uniform.X <- runif(n_draws, 0, 1)
prior_rate <- 3*(-(uniform.X^2)+2*uniform.X + 1)/5
prior_rate <- prior_rate[prior_rate < 1]
hist(prior_rate)
gen_model <- function(rate, users) {
outcome <- rbinom(1, users, rate)
return(outcome)
}
#Trial 1:
n1<-30
users1 <- rep(NA, length(prior_rate))
for(i in 1:length(prior_rate)) {
users1[i] <- gen_model(prior_rate[i], n1)
}
users1 <- na.omit(users1)
# Trial 1:
data1<-10
posterior1 <- prior_rate[users1 == data1]
hist(posterior1, breaks = 20)
# posterior1 becomes our new prior
n_draws <- length(posterior1)
users2 <- rep(NA, n_draws)
#Trial 2:
n2<-50
for(i in 1:n_draws) {
users2[i] <- gen_model(posterior1[i], n2)
}
# Trial 2:
data2<-20
posterior2 <- posterior1[users2 == data2]
hist(posterior2, breaks = 20)
summary(users2)
users2 <- na.omit(users2)
posterior2 <- posterior1[users2 == data2]
hist(posterior2, breaks = 20)
n_draws <- length(posterior1)
users2 <- rep(NA, n_draws)
n2<-50
for(i in 1:n_draws) {
users2[i] <- gen_model(posterior1[i], n2)
}
users2 <- na.omit(users2)
summary(users2)
data2<-20
posterior2 <- posterior1[users2 == data2]
hist(posterior2, breaks = 20)
summary(posterior2)
##### Based on HW 2 SOLUTION
# Number of random draws from the prior
set.seed(123456)
n_draws <- 100000000
# prior_rate <- rbeta(n_draws, 2, 5)
uniform.X <- runif(n_draws, 0, 1)
prior_rate <- 3*(-(uniform.X^2)+2*uniform.X + 1)/5
prior_rate <- prior_rate[prior_rate < 1]
hist(prior_rate)
gen_model <- function(rate, users) {
outcome <- rbinom(1, users, rate)
return(outcome)
}
#Trial 1:
n1<-30
users1 <- rep(NA, length(prior_rate))
for(i in 1:length(prior_rate)) {
users1[i] <- gen_model(prior_rate[i], n1)
}
users1 <- na.omit(users1)
# Trial 1:
data1<-10
posterior1 <- prior_rate[users1 == data1]
hist(posterior1, breaks = 20)
# posterior1 becomes our new prior
n_draws <- length(posterior1)
users2 <- rep(NA, n_draws)
#Trial 2:
n2<-50
for(i in 1:n_draws) {
users2[i] <- gen_model(posterior1[i], n2)
}
users2 <- na.omit(users2)
# Trial 2:
data2<-20
posterior2 <- posterior1[users2 == data2]
hist(posterior2, breaks = 20)
mean(Q1.1.sigma)
mean(Q1.sigma)
plot(density(Q1.1.coeff))
plot(density(Q1.1.coeff), xlim = c(0, 2))
plot(density(Q1.1.coeff), xlim = c(0, 1))
plot(density(Q1.1.sigma), xlim = c(0, 1))
plot(density(Q1.1.sigma))
plot(density(Q1.1.coeff[,2]))
plot(density(Q1.1.coeff[,1]), xlim = c(0, 1))
plot(density(Q1.1.coeff[,2]), xlim = c(0, 1))
plot(density(Q1.1.coeff[,1]),)
plot(density(Q1.1.coeff[,2]))
plot(density(Q1.coeff[,1]))
sigma <- 1
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
Y <- 0.2 + 0.5 * X + rnorm(1, 0, sd = sigma)
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
mean(Q1.1.sigma)
plot(density(Q1.1.coeff[,1]))
plot(density(Q1.1.coeff[,2]))
######
Q1.sigma <- rep(NA, reps)
Q1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
Y <- 0.2 + 0.5 * X + rnorm(1, 0, sd = ((1/lambda) * (exp(1)^(gamma * X))))
model <- lm(Y~X)
Q1.sigma[i] <- summary(model)$sigma
Q1.coeff[i,1] <- model$coef[1]
Q1.coeff[i,2] <- model$coef[2]
error.term <- ((1/lambda) * (exp(1)^(gamma * X)))
}
mean(Q1.sigma)
plot(density(Q1.coeff[,1]))
plot(density(Q1.coeff[,2]))
results <- data.frame(rep = rep(1:reps, times = 4),
group = rep(c("Y-interceptNORMAL", "Slope-CoeffNORMAL","Y-intercept", "Slope-Coeff"), each = reps),
values = append(Q1.1.coeff[,1], Q1.1.coeff[,2],Q1.coeff[,1], Q1.coeff[,2]))
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
Y <- 0.2 + 0.5 * X + rnorm(1, 0, sd = sigma)
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
mean(Q1.1.sigma)
plot(density(Q1.1.coeff[,1]))
plot(density(Q1.1.coeff[,2]))
######
Q1.sigma <- rep(NA, reps)
Q1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
Y <- 0.2 + 0.5 * X + rnorm(1, 0, sd = ((1/lambda) * (exp(1)^(gamma * X))))
model <- lm(Y~X)
Q1.sigma[i] <- summary(model)$sigma
Q1.coeff[i,1] <- model$coef[1]
Q1.coeff[i,2] <- model$coef[2]
error.term <- ((1/lambda) * (exp(1)^(gamma * X)))
}
mean(Q1.sigma)
plot(density(Q1.coeff[,1]))
plot(density(Q1.coeff[,2]))
results <- data.frame(rep = rep(1:reps, times = 4),
group = rep(c("Y-interceptNORMAL", "Slope-CoeffNORMAL","Y-intercept", "Slope-Coeff"), each = reps),
values = append(Q1.1.coeff[,1], Q1.1.coeff[,2], Q1.coeff[,1], Q1.coeff[,2]))
values = append(Q1.1.coeff[,1], Q1.1.coeff[,2], Q1.coeff[,1], Q1.coeff[,2]
)
values = append(Q1.1.coeff[,1], Q1.1.coeff[,2], Q1.coeff[,1], Q1.coeff[,2])
values = append(1, Q1.1.coeff[,1], Q1.1.coeff[,2], Q1.coeff[,1], Q1.coeff[,2])
results <- data.frame(rep = rep(1:reps, times = 4),
group = rep(c("Y-interceptNORMAL", "Slope-CoeffNORMAL","Y-intercept", "Slope-Coeff"), each = reps),
values = append(append(append(Q1.1.coeff[,1], Q1.1.coeff[,2]), Q1.coeff[,1]), Q1.coeff[, 2]))
g3 <- ggplot(results, aes(values, group = group, color = group)) + geom_density(size = 1.5)
g3 <- g3 + xlab("Distribution Interval")+ labs(title = "Q1")
g3 <- g3 +  theme_tufte() +  scale_colour_solarized("blue")
g3
par(mfrow=c(1,2))
plot(density(Q1.coeff[,1]))
plot(density(Q1.coeff[,2]))
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[i] <- 0.2 + 0.5 * X[i] + rnorm(1, 0, sd = sigma)
}
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
mean(Q1.1.sigma)
par(mfrow=c(1,2))
plot(density(Q1.1.coeff[,1]))
plot(density(Q1.1.coeff[,2]))
######
Q1.sigma <- rep(NA, reps)
Q1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
Y <- 0.2 + 0.5 * X + rnorm(1, 0, sd = ((1/lambda) * (exp(1)^(gamma * X))))
model <- lm(Y~X)
Q1.sigma[i] <- summary(model)$sigma
Q1.coeff[i,1] <- model$coef[1]
Q1.coeff[i,2] <- model$coef[2]
error.term <- ((1/lambda) * (exp(1)^(gamma * X)))
}
mean(Q1.sigma)
par(mfrow=c(1,2))
plot(density(Q1.coeff[,1]))
plot(density(Q1.coeff[,2]))
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = sigma)
}
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
mean(Q1.1.sigma)
par(mfrow=c(1,2))
plot(density(Q1.1.coeff[,1]))
plot(density(Q1.1.coeff[,2]))
######
Q1.sigma <- rep(NA, reps)
Q1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = ((1/lambda) * (exp(1)^(gamma * X))))
}
model <- lm(Y~X)
Q1.sigma[i] <- summary(model)$sigma
Q1.coeff[i,1] <- model$coef[1]
Q1.coeff[i,2] <- model$coef[2]
error.term <- ((1/lambda) * (exp(1)^(gamma * X)))
}
mean(Q1.sigma)
par(mfrow=c(1,2))
plot(density(Q1.coeff[,1]))
plot(density(Q1.coeff[,2]))
results <- data.frame(rep = rep(1:reps, times = 4),
group = rep(c("Y-interceptNORMAL", "Slope-CoeffNORMAL","Y-intercept", "Slope-Coeff"), each = reps),
values = append(append(append(Q1.1.coeff[,1], Q1.1.coeff[,2]), Q1.coeff[,1]), Q1.coeff[, 2]))
g3 <- ggplot(results, aes(values, group = group, color = group)) + geom_density(size = 1.5)
g3 <- g3 + xlab("Distribution Interval")+ labs(title = "Q1")
g3 <- g3 +  theme_tufte() +  scale_colour_solarized("blue")
g3
results <- data.frame(rep = rep(1:reps, times = 4),
group = rep(c("Y-interceptNORMAL", "Slope-CoeffNORMAL","Y-intercept", "Slope-Coeff"), each = reps),
values = append(append(append(Q1.1.coeff[,1], Q1.1.coeff[,2]), Q1.coeff[,1]), Q1.coeff[, 2]))
g3 <- ggplot(results, aes(values, group = group, color = group)) + geom_density(size = 1.5)
g3 <- g3 + xlab("Distribution Interval")+ labs(title = "Q1, with Violation in Error",
subtitle = "NORMAL denotes non-Violation line")
g3 <- g3 +  theme_tufte() +  scale_colour_solarized("blue")
g3
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = sigma)
}
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = sigma)
}
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = sigma)
set.seed(12345)
n <- 1000
reps <- 500
lambda <-  50
gamma  <- 5
sigma <- 1
results <- rep(NA, reps)
X <- rbeta(n, 2, 5)
Y <- rep(NA, n)
###### Q1 normal standard deviation
Q1.1.sigma <- rep(NA, reps)
Q1.1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = sigma)
}
model <- lm(Y~X)
Q1.1.sigma[i] <- summary(model)$sigma
Q1.1.coeff[i,1] <- model$coef[1]
Q1.1.coeff[i,2] <- model$coef[2]
}
mean(Q1.1.sigma)
par(mfrow=c(1,2))
plot(density(Q1.1.coeff[,1]))
plot(density(Q1.1.coeff[,2]))
######
Q1.sigma <- rep(NA, reps)
Q1.coeff  <- matrix(NA, nrow = reps, ncol = 2)
for (i in 1:reps) {
for (j in 1:n){
Y[j] <- 0.2 + 0.5 * X[j] + rnorm(1, 0, sd = ((1/lambda) * (exp(1)^(gamma * X))))
}
model <- lm(Y~X)
Q1.sigma[i] <- summary(model)$sigma
Q1.coeff[i,1] <- model$coef[1]
Q1.coeff[i,2] <- model$coef[2]
error.term <- ((1/lambda) * (exp(1)^(gamma * X)))
}
setwd(C:/Users/Owner/Documents/Personal/Projects/ColdFrameTemp)
temp <- read.csv("ColdFrameTemp.csv")
setwd("C:/Users/Owner/Documents/Personal/Projects/ColdFrameTemp")
temp <- read.csv("ColdFrameTemp.csv")
View(temp)
temp <- read.csv("ColdFrameTemp.csv")
winona <- temp[temp$Group == "Winona",]
coldFrame <- temp[temp$Group == "ColdFrame",]
coldFrame$ModDate <- as.POSIXct(coldFrame$Date, format = "%m/%d/%y %H:%M:%S")
View(coldFrame)
winona$ModDate <- as.POSIXct(winona$Date, format = "%m/%d/%y %H:%M")
View(winona)
winona <- temp[temp$Group == "Winona",]
winona$Date <- as.POSIXct(winona$Date, format = "%m/%d/%y %H:%M")
coldFrame <- temp[temp$Group == "ColdFrame",]
coldFrame$Date <- as.POSIXct(coldFrame$Date, format = "%m/%d/%y %H:%M:%S")
write.csv(rbind(winona,coldFrame), "ColdFrameTemperatures.csv")
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%y %H:%M")
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group)) + geom_point()
library(ggplot2)
ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group)) + geom_point()
ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group)) + geom_line()
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_solarized_2()
library(ggthemes)
g1 <- g1 + geom_line() + theme_solarized_2()
g1
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_solarized()
g1
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_solarized()+scale_colour_solarized("blue")
g1
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
?png
png(filename="OverallGraph.png", width=3.5, height=5, units=in, res=300)
png(filename="OverallGraph.png", width=5, height=3.5, units="in", res=300)
g1
dev.off()
png(filename="OverallGraph.png", width=11, height=8.5, units="in", res=300)
g1
dev.off()
library(dplyr)
temp %>% select(Date) %>% filter(Date > "2018-03-17") %>% count()
temp %>% select(Date) %>% filter(Date > "2018-03-18") %>% count()
temp %>% select(Date) %>% filter(Date > "2018-03-18", Date < "2018-06-01") %>% count()
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
png(filename="OverallGraph.png", width=11, height=8.5, units="in", res=300)
g1
dev.off()
g1
winona <- temp[temp$Group == "Winona",]
coldFrame <- temp[temp$Group == "ColdFrame",]
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
temp$Date <- as.POSIXct(temp$Date, format = "%Y/%m/%d %H:%M:%S")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
View(temp)
temp$Date <- as.POSIXct(temp$Date, format = "%m-%d-%Y %H:%M")
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m-%d-%Y %H:%M")
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
temp$Date <- as.POSIXct(temp$Date, format = "%Y-%m-%d %H:%M:%S")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
dev.off()
library(ggplot2)
library(ggthemes)
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
library(dplyr)
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
g1 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g1 <- g1 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g1
png(filename="OverallGraph.png", width=11, height=8.5, units="in", res=300)
g1
dev.off()
g2 <- ggplot(temp, aes(x = Date, y = HOURLYRelativeHumidity, group = Group, color = Group))
g2 <- g2 + geom_line() + theme_hc()+scale_colour_solarized("blue") + ylab("Humidity")
g2
g3 <- ggplot(temp, aes(x = Date, y = HOURLYWindSpeed, group = Group, color = Group))
g3 <- g3 + geom_line() + theme_hc()+scale_colour_solarized("blue") + ylab("Wind Speed")
g3
setwd("C:/Users/Owner/Documents/Personal/Projects/ColdFrameTemp/ColdFrameTemperature")
temp <- read.csv("ColdFrameTemperatures.csv")
temp$Date <- as.POSIXct(temp$Date, format = "%m/%d/%Y %H:%M")
temp <- temp %>% filter(Date > "2018-03-18", Date < "2018-06-01")
temp$Date <- as.POSIXct(temp$Date, format = "%Y-%m-%d %H:%M:%S")
min(temp[temp$Group == "Winona", "TemperatureC"])
(temp[temp$Group == "Winona", "TemperatureC"])
min(temp[temp$Group == "Winona", "TemperatureC"], na.rm = T)
min(temp[temp$Group == "ColdFrame", "TemperatureC"], na.rm = T)
temp2 <- temp %>% filter(Date > "2018-04-20", Date < "2018-05-10")
g4 <- ggplot(temp, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g4 <- g4 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g4
g4 <- ggplot(temp2, aes(x = Date, y = TemperatureC, group = Group, color = Group))
g4 <- g4 + geom_line() + theme_hc()+scale_colour_solarized("blue")
g4
png(filename="ZoomInGraph.png", width=11, height=8.5, units="in", res=300)
g4
dev.off()
